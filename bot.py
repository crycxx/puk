import asyncio

from aiogram import Bot, Dispatcher, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ChatMemberUpdated, BotCommand, BotCommandScopeDefault, BotCommandScopeAllGroupChats
from aiogram.filters import ChatMemberUpdatedFilter, StateFilter
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
import logging
logging.basicConfig(level=logging.INFO)

from db import (
    init_db, register_user, save_target, get_target_id,
    set_user_visibility, is_user_visible,
    save_whisper, get_whisper_text
)



API_TOKEN = "8137936177:AAFlsmZXsb9mDi-i5iTK5edI6KAFvmVAXhA"
BOT_USERNAME = "NexWhisperBot"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

class SendAnonState(StatesGroup):
    waiting_for_text = State()


# --- –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def set_bot_commands(bot: Bot):
    private_commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="support", description="–ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
    ]
    await bot.set_my_commands(private_commands, scope=BotCommandScopeDefault())

    group_commands = [
        BotCommand(command="whisper", description="–®—ë–ø–æ—Ç"),
    ]
    await bot.set_my_commands(group_commands, scope=BotCommandScopeAllGroupChats())
# --- –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ ---


@router.message(F.text == "/start")
async def handle_start(message: Message):
    await register_user(message.from_user.id)
    await set_user_visibility(message.from_user.id, True)
    link = f"https://t.me/{BOT_USERNAME}?start=user{message.from_user.id}"

    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì© –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", url=link)]
    ])
    reply_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–ü–µ—Ä–µ—à–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –ª—é–¥—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        reply_markup=inline_keyboard
    )

@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=True))
async def on_bot_added(event: ChatMemberUpdated, bot: Bot):
    if event.new_chat_member.user.id != (await bot.me()).id:
        return  # –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –±–æ—Ç

    if event.new_chat_member.status in ("member", "administrator"):
        try:
            await bot.send_message(
                chat_id=event.chat.id,
                text=(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
                    "üíå –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É –≤ –õ–° –∫–æ–º–∞–Ω–¥–æ–π /start, "
                    "–∞ –∑–∞—Ç–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö.\n\n"
                    "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /whisper ‚Äî –æ—Ç–ø—Ä–∞–≤—å '—à—ë–ø–æ—Ç' –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
                )
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {e}")
 

@router.message(F.text.startswith("/start user"))
async def handle_start_user(message: Message, state: FSMContext):
    param = message.text.split(" ", 1)[-1]
    if not param.startswith("user"):
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.")

    target_id = int(param.replace("user", ""))
    sender_id = message.from_user.id

    if sender_id == target_id:
        return await message.answer("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
    if not await is_user_visible(target_id):
        return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫—Ä—ã–ª—Å—è –∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")

    await save_target(sender_id, target_id)
    await state.clear()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úçÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="send_anon")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="info_anon")]
    ])

    await message.answer(
        "üìù –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=keyboard
    )
    return None



@router.callback_query(F.data == "send_anon")
async def handle_send_anon(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SendAnonState.waiting_for_text)
    await callback.message.edit_text("‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ:")

@router.callback_query(F.data == "info_anon")
async def handle_info_anon(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "‚ÑπÔ∏è –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n"
        "–ù–∞–∂–º–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' –∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç ‚Äî –æ–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."
    )


@router.message(SendAnonState.waiting_for_text, F.text)
async def process_anon_message(message: Message, state: FSMContext):
    target_id = await get_target_id(message.from_user.id)
    await state.clear()

    if not target_id:
        return await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")

    try:
        await bot.send_message(
            target_id,
            f"üì© –¢–µ–±–µ –ø—Ä–∏—à–ª–æ <b>–∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>:\n\n{message.text}",
            parse_mode="HTML"
        )
        await message.answer("‚úÖ –¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        return None
    except Exception:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).")
        return None



@router.callback_query(F.data.startswith("reveal_whisper:"))
async def handle_whisper(callback: CallbackQuery):
    _, receiver_id, msg_id = callback.data.split(":")
    receiver_id = int(receiver_id)
    msg_id = int(msg_id)

    if callback.from_user.id != receiver_id:
        return await callback.answer("‚ùå –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è —Ç–µ–±—è.", show_alert=True)

    # –ü–æ–ª—É—á–∞–µ–º —à—ë–ø–æ—Ç (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)
    whisper_text = await get_whisper_text(msg_id, receiver_id)

    if not whisper_text:
        return await callback.answer("‚ùó –®—ë–ø–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    return await callback.answer(f"üí¨ –®—ë–ø–æ—Ç: {whisper_text}", show_alert=True)


@router.message(Command("whisper"))
async def send_whisper(message: Message):
    if not message.reply_to_message:
        return await message.reply("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    target = message.reply_to_message.from_user
    if target.is_bot:
        return await message.reply("‚ùó –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —à—ë–ø–æ—Ç –±–æ—Ç—É.")

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return await message.reply("‚ùó –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç —à—ë–ø–æ—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")

    whisper_text = parts[1]

    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏, –ø–æ—Ç–æ–º –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
    sent = await bot.send_message(
        chat_id=message.chat.id,
        text=f"üí¨ –®—ë–ø–æ—Ç –¥–ª—è @{target.username or target.full_name}"
    )

    # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º message_id
    await bot.edit_message_reply_markup(
        chat_id=sent.chat.id,
        message_id=sent.message_id,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —à—ë–ø–æ—Ç üëÅ",
                callback_data=f"reveal_whisper:{target.id}:{sent.message_id}"
            )]
        ])
    )

    await save_whisper(sent.message_id, target.id, whisper_text)
    return None

@router.message(F.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support(message: Message):
    support_users = [
        {"name": "cry", "username": "cvvcrying"},
        {"name": "–ú–∞—Ä–∏—è", "username": "support2"}
    ]

    contact_lines = [
        f"üë§ <b>{user['name']}</b>: @{user['username']}" for user in support_users
    ]
    contacts_text = "\n".join(contact_lines)

    await message.answer(
        "‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n\n"
        "–°–≤—è–∂–∏—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n\n"
        f"{contacts_text}",
        parse_mode="HTML"
    )

@dp.message(Command("support"))
async def cmd_support(message: Message):
    support_users = [
        {"name": "cry", "username": "cvvcrying"},
        {"name": "–ú–∞—Ä–∏—è", "username": "support2"},
    ]

    contact_lines = [
        f"üë§ <b>{user['name']}</b>: @{user['username']}" for user in support_users
    ]
    contacts_text = "\n".join(contact_lines)

    await message.answer(
        "‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n\n"
        f"{contacts_text}",
        parse_mode="HTML"
    )


async def main():
    await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await set_bot_commands(bot)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

if __name__ == "__main__":
    asyncio.run(main())
